<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[获取控件布局宽高的方法]]></title>
      <url>http://yoursite.com/2017/01/31/%E6%B5%8B%E9%87%8F%E5%B8%83%E5%B1%80%E5%AE%BD%E9%AB%98%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在开发的过程中，我们有时会需要拿到一个控件的宽高，但是当我们使用getWith()或getHight()，拿到的结果却是0，这显然不是我们想要的结果，因为这时控件还没有加载完毕。</p>
</blockquote>
<p>现在这有两个布局<code>video_top</code>和<code>video_bottom</code>，我们想要得到这两个布局的高度，有如下方法： </p>
<pre><code>//第一种获取方法：先对这两个控件进行测量，然后就可以得到测量高度
video_top.measure(0,0);
video_bottom.measure(0,0);
int topH = video_top.getMeasuredHeight();
int bottomH = video_bottom.getMeasuredHeight();

//第二种方式获取：对控件进行监听，addOnGlobalLayoutListener当在一个视图树中全局布局发生改变或者视图树中的某个视图的可视状态发生改变时，所要调用的回调函数的接口类
video_top.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
    @Override
    public void onGlobalLayout() {
        //当布局发生改变后移除监听
        video_top.getViewTreeObserver().removeOnGlobalLayoutListener(this);
        //获取top的高度
        int topH = video_top.getHeight();
        System.out.println(&quot;topH=&quot; + topH);

    }
});
video_bottom.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
    @Override
    public void onGlobalLayout() {
        video_bottom.getViewTreeObserver().removeOnGlobalLayoutListener(this);
        int bottomH = video_bottom.getHeight();
        System.out.println(&quot;bottomH=&quot; + bottomH);

    }
});

//第三种获取方式：通过Handler的post方法，因为控件的绘制、布局是通过发送消息来通知执行的，post方法会执行完前面的消息后才能执行当前操作，那么这里就可以得到布局后的高度
handler.post(new Runnable() {
    @Override
    public void run() {
        int topH = video_top.getHeight();
        int bottomH = video_bottom.getHeight();
        System.out.println(&quot;topH=&quot;+topH+&quot;bottomH=&quot; + bottomH);

    }
});

 //第四种获取方式：复写onWindowFocusChanged(boolean hasFocus)方法，这个方法会在Activity得到或者失去焦点的时候回调，而这时候控件已经加载完毕
@Override
public void onWindowFocusChanged(boolean hasFocus) {
    super.onWindowFocusChanged(hasFocus);
    topH = mVideoPlayerTop.getHeight();
    bottomH = mVideoPlayerBottom.getHeight();
}
</code></pre><p>ok，上面是我总结的几种获取控件布局的方法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[多媒体列表的适配及数据库异步查询]]></title>
      <url>http://yoursite.com/2017/01/25/%E5%A4%9A%E5%AA%92%E4%BD%93%E5%88%97%E8%A1%A8%E7%9A%84%E9%80%82%E9%85%8D%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%82%E6%AD%A5%E6%9F%A5%E8%AF%A2/</url>
      <content type="html"><![CDATA[<h3 id="1-多媒体列表适配"><a href="#1-多媒体列表适配" class="headerlink" title="1.多媒体列表适配"></a>1.多媒体列表适配</h3><blockquote>
<p>列表布局很简单，就是一个ListView，列表的数据是用从手机中的数据库中查找的视频作为数据源</p>
</blockquote>
<ul>
<li>要查找手机中的视频数据我们可以通过两种方法：<ol>
<li>第一种方法通过<code>MediaProvider</code> 提供的数据库中查找，当然里面不仅有视频，还有音乐的数据也在里面，不过这种方式查找的数据要开机前存在的数据才能找得到，后面添加的视频文件要重启后数据库中才有。</li>
<li>第二种就是通过主动发起扫描视频文件,通过<code>MediaScannerConnection.scanFile()</code>提供的方法,这里就不多说了，本文中使用的就是第一种方法了</li>
</ol>
</li>
<li>使用了ListView，自然就用到了Adapter，我们一般的用法都是继承BaseAdapter自定义一个Adapter使用ArrayList来设置数据，因为我们查找数据库返回的是一个Cursor，那么这里我们就可以使用一个特殊的适配器<code>CursorAdapter</code>了,具体的使用看下面的代码</li>
</ul>
<h3 id="适配器Adapter类"><a href="#适配器Adapter类" class="headerlink" title="适配器Adapter类"></a>适配器Adapter类</h3><pre><code>import android.content.Context;
import android.database.Cursor;
import android.text.format.Formatter;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CursorAdapter;
import android.widget.TextView;

import com.example.videoplayersimple.R;
import com.example.videoplayersimple.bean.VideoItem;
import com.example.videoplayersimple.utils.StringUtil;

public class VideoCursorAdapter extends CursorAdapter {

    public VideoCursorAdapter(Context context, Cursor cursor) {
        super(context, cursor);
    }
    //converview为null  解析布局获取view
    @Override
    public View newView(Context context, Cursor cursor, ViewGroup parent) {
        View view = LayoutInflater.from(context).inflate(R.layout.item_video, parent, false);
        ViewHolder holder = new ViewHolder(view);
        view.setTag(holder);
        return view;
    }
    //view设置数据
    @Override
    public void bindView(View view, Context context, Cursor cursor) {
        ViewHolder holder = (ViewHolder) view.getTag();
        VideoItem videoItem = VideoItem.getVideoItem(cursor);
        holder.video_item_name.setText(videoItem.getTitle());
        holder.video_item_duration.setText(StringUtil.parseDuration(videoItem.getDuration()));
        holder.video_item_size.setText(Formatter.formatFileSize(context,videoItem.getSize()));
    }

    static class ViewHolder {
        public TextView video_item_name;
        public TextView video_item_duration;
        public TextView video_item_size;

        public ViewHolder(View rootView) {
            video_item_name = (TextView) rootView.findViewById(R.id.video_item_name);
            video_item_duration = (TextView) rootView.findViewById(R.id.video_item_duration);
            video_item_size = (TextView) rootView.findViewById(R.id.video_item_size);
        }

    }
}
</code></pre><h3 id="Bean类"><a href="#Bean类" class="headerlink" title="Bean类"></a>Bean类</h3><pre><code>import android.database.Cursor;
import android.provider.MediaStore;
import java.io.Serializable;

public class VideoItem implements Serializable {
    private String path;    //视频路径
    private String title;    //视频名字
    private int duration;    //视频时长
    private long size;        //视频大小
    //初始化数据
    public static VideoItem getVideoItem(Cursor cursor){
        VideoItem videoItem = new VideoItem();
        videoItem.path = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.DATA));
        videoItem.title = cursor.getString(cursor.getColumnIndex(MediaStore.Video.Media.TITLE));
        videoItem.duration = cursor.getInt(cursor.getColumnIndex(MediaStore.Video.Media.DURATION));
        videoItem.size = cursor.getLong(cursor.getColumnIndex(MediaStore.Video.Media.SIZE));
        return videoItem;
    }

    public String getPath() {
        return path;
    }

    public String getTitle() {
        return title;
    }

    public int getDuration() {
        return duration;
    }

    public long getSize() {
        return size;
    }
}
</code></pre><h3 id="2-异步查询数据库"><a href="#2-异步查询数据库" class="headerlink" title="2.异步查询数据库"></a>2.异步查询数据库</h3><blockquote>
<p>在我Demo中使用了三种异步查询数据库的方法：</p>
</blockquote>
<ol>
<li>通过new Thread()开启新的线程，Handler处理数据。</li>
<li>通过AsyncTask。</li>
<li>通过AsyncQueryHandler。</li>
</ol>
<h4 id="2-1-第一种：new-Thread-开启线程查询数据库，Handler在主线程设置刷新数据"><a href="#2-1-第一种：new-Thread-开启线程查询数据库，Handler在主线程设置刷新数据" class="headerlink" title="2.1 第一种：new Thread()开启线程查询数据库，Handler在主线程设置刷新数据"></a>2.1 第一种：new Thread()开启线程查询数据库，Handler在主线程设置刷新数据</h4><blockquote>
<p>1.子线程查找数据库，返回Cursor，Handler发送消息及数据到，查找数据库Uri，及列表参数在MediaStore中都有提供</p>
</blockquote>
<pre><code>private void queryData(final ContentResolver resolver) {
        new Thread(){
            @Override
            public void run() {
                super.run();
                Cursor cursor = resolver.query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, new String[]{
                        MediaStore.Video.Media._ID,
                        MediaStore.Video.Media.DATA,    //文件路径
                        MediaStore.Video.Media.DURATION,//文件时长
                        MediaStore.Video.Media.TITLE,//文件名称
                        MediaStore.Video.Media.SIZE,    //文件大小
                }, null, null, null, null);
                Message msg = mHandler.obtainMessage();
                msg.what = 0;
                msg.obj = cursor;
                mHandler.sendMessage(msg);
            }
        }.start();
    }
</code></pre><blockquote>
<p>2.主线程设置刷新数据，方法是adapter.swapCursor(cursor);</p>
</blockquote>
<pre><code>private Handler mHandler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 0:
                    mCursor = (Cursor) msg.obj;
                    //设置新Cursor刷新cursor
                    mAdapter.swapCursor(mCursor);
                    break;
            }
        }
    };
</code></pre><h4 id="2-2-第二种：AsyncTask-使用方法也很简单"><a href="#2-2-第二种：AsyncTask-使用方法也很简单" class="headerlink" title="2.2 第二种：AsyncTask,使用方法也很简单"></a>2.2 第二种：AsyncTask,使用方法也很简单</h4><blockquote>
<p>写个类继承<code>AsyncTask&lt;Params, Progress, Result&gt;</code><br><code>doInBackground(ContentResolver... params)</code>运行在子线程,在这完成查询<br><code>onPostExecute(Cursor cursor)</code>运行在主线程，在这进行数据设置刷新</p>
</blockquote>
<pre><code>private void queryData2(ContentResolver resolver) {
        //传入参数
        new MyTask().execute(resolver);
}

class MyTask extends AsyncTask&lt;ContentResolver,Void,Cursor&gt; {
        //子线程执行
        @Override
        protected Cursor doInBackground(ContentResolver... params) {
            Cursor cursor = params[0].query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, new String[]{
                    MediaStore.Video.Media._ID,
                    MediaStore.Video.Media.DATA,
                    MediaStore.Video.Media.DURATION,
                    MediaStore.Video.Media.TITLE,
                    MediaStore.Video.Media.SIZE,
            }, null, null, null, null);
            return cursor;
        }
        //主线程执行
        @Override
        protected void onPostExecute(Cursor cursor) {
            super.onPostExecute(cursor);
            mAdapter.swapCursor(cursor);
        }
    }
</code></pre><h4 id="2-3-第三种：AsyncQueryHandler，使用方法如下"><a href="#2-3-第三种：AsyncQueryHandler，使用方法如下" class="headerlink" title="2.3 第三种：AsyncQueryHandler，使用方法如下"></a>2.3 第三种：AsyncQueryHandler，使用方法如下</h4><pre><code>private void queryData3(final ContentResolver resolver) {
        AsyncQueryHandler handler = new AsyncQueryHandler(resolver){
            //查询完成时回调
            /**
             * @param token 令牌
             * @param cookie startQuery中传入的对象
             * @param cursor 查找返回的Cursor
             */
            @Override
            protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
                super.onQueryComplete(token, cookie, cursor);
                ((VideoCursorAdapter)cookie).swapCursor(cursor);
            }
        };
        handler.startQuery(0,mAdapter, MediaStore.Video.Media.EXTERNAL_CONTENT_URI, new String[]{
                MediaStore.Video.Media._ID,
                MediaStore.Video.Media.DATA,
                MediaStore.Video.Media.DURATION,
                MediaStore.Video.Media.TITLE,
                MediaStore.Video.Media.SIZE,
        }, null, null, null);
    }
</code></pre><h3 id="全部代码如下："><a href="#全部代码如下：" class="headerlink" title="全部代码如下："></a>全部代码如下：</h3><pre><code>package com.example.videoplayersimple.ui;

import android.content.AsyncQueryHandler;
import android.content.ContentResolver;
import android.content.Intent;
import android.database.Cursor;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.Message;
import android.provider.MediaStore;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;

import com.example.videoplayersimple.R;
import com.example.videoplayersimple.adapter.VideoCursorAdapter;
import com.example.videoplayersimple.bean.VideoItem;

public class MainActivity extends BaseActivity implements AdapterView.OnItemClickListener {


    private ListView mListView;
    private VideoCursorAdapter mAdapter;
    private Handler mHandler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            switch (msg.what) {
                case 0:
                    mCursor = (Cursor) msg.obj;
                    //设置新Cursor刷新cursor
                    mAdapter.swapCursor(mCursor);
                    break;
            }
        }
    };
    private Cursor mCursor;

    @Override
    protected void initData() {
        final ContentResolver resolver = getBaseContext().getContentResolver();
        //第一种异步查询方式：new Thread新建子线程
//        queryData(resolver);
        //第二种异步查询方式：AsyncTask
//        queryData2(resolver);
        //第三种异步查询方式：AsyncQueryHandler
        queryData3(resolver);
    }

    private void queryData2(ContentResolver resolver) {
        //传入参数
        new MyTask().execute(resolver);
    }

    private void queryData3(final ContentResolver resolver) {
        AsyncQueryHandler handler = new AsyncQueryHandler(resolver){
            //查询完成时回调
            /**
             * @param token 令牌
             * @param cookie startQuery中传入的对象
             * @param cursor 查找返回的Cursor
             */
            @Override
            protected void onQueryComplete(int token, Object cookie, Cursor cursor) {
                super.onQueryComplete(token, cookie, cursor);
                ((VideoCursorAdapter)cookie).swapCursor(cursor);
            }
        };
        handler.startQuery(0,mAdapter, MediaStore.Video.Media.EXTERNAL_CONTENT_URI, new String[]{
                MediaStore.Video.Media._ID,
                MediaStore.Video.Media.DATA,
                MediaStore.Video.Media.DURATION,
                MediaStore.Video.Media.TITLE,
                MediaStore.Video.Media.SIZE,
        }, null, null, null);
    }

    private void queryData(final ContentResolver resolver) {
        new Thread(){
            @Override
            public void run() {
                super.run();
                Cursor cursor = resolver.query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, new String[]{
                        MediaStore.Video.Media._ID,
                        MediaStore.Video.Media.DATA,
                        MediaStore.Video.Media.DURATION,
                        MediaStore.Video.Media.TITLE,
                        MediaStore.Video.Media.SIZE,
                }, null, null, null, null);
                Message msg = mHandler.obtainMessage();
                msg.what = 0;
                msg.obj = cursor;
                mHandler.sendMessage(msg);
            }
        }.start();
    }

    @Override
    protected void initListener() {
        mAdapter = new VideoCursorAdapter(getBaseContext(), null);
        mListView.setAdapter(mAdapter);
        mListView.setOnItemClickListener(this);
    }

    @Override
    protected void initView() {
        mListView = (ListView) findViewById(R.id.listView);
    }

    @Override
    protected int getLayoutId() {
        return R.layout.activity_main;
    }

    @Override
    protected void processClick(View v) {

    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        //释放cursor
        mAdapter.changeCursor(null);
    }

    @Override
    public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {
        //获取当前条目的viewItem
        VideoItem videoItem = VideoItem.getVideoItem((Cursor) parent.getItemAtPosition(position));
        Intent intent = new Intent(getApplicationContext(), VideoPlayerActivity.class);
        intent.putExtra(&quot;videoItem&quot;,videoItem);
        startActivity(intent);
    }

    class MyTask extends AsyncTask&lt;ContentResolver,Void,Cursor&gt; {
        //子线程执行
        @Override
        protected Cursor doInBackground(ContentResolver... params) {
            Cursor cursor = params[0].query(MediaStore.Video.Media.EXTERNAL_CONTENT_URI, new String[]{
                    MediaStore.Video.Media._ID,
                    MediaStore.Video.Media.DATA,
                    MediaStore.Video.Media.DURATION,
                    MediaStore.Video.Media.TITLE,
                    MediaStore.Video.Media.SIZE,
            }, null, null, null, null);
            return cursor;
        }

        //主线程执行
        @Override
        protected void onPostExecute(Cursor cursor) {
            super.onPostExecute(cursor);
            mAdapter.swapCursor(cursor);
        }
    }
}
</code></pre><blockquote>
<p>源码地址：<a href="https://github.com/Singleswolf/VideoPlayerSimple" target="_blank" rel="external">https://github.com/Singleswolf/VideoPlayerSimple</a></p>
</blockquote>
<p>好了，上面就是我这次的内容了，这是我的第一个博客，学习的笔记，给大家分享一下，写的不太好，让各位见笑了！</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android无限轮播图]]></title>
      <url>http://yoursite.com/2017/01/08/Android%E6%97%A0%E9%99%90%E8%BD%AE%E6%92%AD%E5%9B%BE/</url>
      <content type="html"></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[分类]]></title>
      <url>http://yoursite.com/categories/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[首页]]></title>
      <url>http://yoursite.com/home/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[公益404]]></title>
      <url>http://yoursite.com/commonweal/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[标签]]></title>
      <url>http://yoursite.com/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
